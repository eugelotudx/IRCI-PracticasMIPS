Práctica MIPS r2000

Cuestiones
----------
Módulo 1

1.1: 
palabra1: 0x0000000f
palabra2: 0x00000015

1.2:
palabra1: 0x10010000
palabra2: 0x10010004

1.3:
Las etiquetas toman los valores de dirección (descriptos en el apartado 1.2), pues una etiqueta es un identificador que hacer referencia a la posición de memoria del elemento definido en esa dirección. Es decir, es la dirección, no el valor.

1.4:
No hay diferencias respecto al programa anterior.

1.5:
.data 0x10000000
vector: .word 0x10,30,0x34,0x20,60

1.6:
El vector comenzará en la dirección 0x10000004 porque la dirección 0x10000002 es la mitad de una palabra.

1.7:
0x1001000

1.8:
0x0000010

1.9:
palabra1: 0x40302010
palabra2: 0x10203040

1.10:
El simulador utiliza el tipo de alineamiento y organización de los datos Little-endian, en donde la primer cifra guardada es la menos significativa. Este hecho se evidencia al guardar palabra1: 0x10 se guarda al final, en las cifras menos significativas.

1.11:
palabra1: 0x1001000
palabra2: 0x1001004

1.12:
La cadena anterior se encuentra dividida entre las palabras 0x1001000 y 0x1001004.
0x1001000: 0x64636261
0x1001004: 0x0000ff65

1.13:
Si se emplea asciiz, luego de la "tira", se dejan dos dígitos hexadecimales seteados en 0.
0x1001000: 0x64636261
0x1001004: 0x00ff0065

1.14:
.data
cadena: .byte 0x61,0x62,0x63,0x64,0x65
octeto: .byte 0xff

1.15:
Se reservó desde 0x1001004 a 0x100100c.

1.16:
En total se reservaron 8 bytes: dos palabras.

1.17:
El rango de posiciones reservado fue 0x1001001-0x1001005

1.18:
No, porque las posiciones de las palabras están delimitadas anteriormente por la arquitectura. La palabra podría considerarse desde 0x1001000 o 0x1001004.

1.19:
byte1: a partir de 0x1001000
byte2: a partir de 0x1001005

1.20:
palabra se inicializó a partir de la dirección 0x1001008 porque, al ser una palabra, no puede estar dividida entre dos espacios de palabra.

1.21:
0x1001004-0x1001008

1.22:
Sí, podrían constituir los bytes de una palabra. align indica que la dirección debe alinearse a la de una palabra.



Módulo 2
2.1:
Dirección: 0x00400000
Tamaño: 4 bytes
Instrucción máquina: "lui", instrucción; "$s0" indica el registro en donde se almacenará el valor, "0x8690" el valor a cargar en el registro, los dígitos que faltan se añaden como 0s a la derecha (0x86900000)

2.2:
El valor especificado se carga en el registro.

2.3:
Carga 0x12345678 en $s0

2.4:
Instrucciones: 
- Con lui se carga en el registro $1 los dos bytes más significativos de la palabra. Con ori se almacena en el registro $16 ($s0) la suma del valor contenido en $1 y el valor inmediato 0x00005678

2.5:
El simulador transformó el primer lw, sin un valor semi-inmediato de la dirección de donde obtener el valor en un lui. La segunda instrucción carga en el registro $1 el valor indicado. Luego, se le suma 0. Finalmente, se carga en el registro $16 lo contenido en la dirección especificada en $1



